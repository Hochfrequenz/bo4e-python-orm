[tox]
envlist =
    integrationtests
    unittests
    linting
    coverage
    type_check
    spell_check
skip_missing_interpreters = True
skipsdist = True

[testenv]
#basepython = py312
commands = python -m pip install --upgrade pip

[testenv:unittests]
# the tests environment is called by the Github action that runs the unit tests
deps =
    -r requirements.txt
    .[tests]
setenv = PYTHONPATH = {toxinidir}/src
commands =
    tox -e setup_testpostgresql
    tox -e remove_testpostgresql
allowlist_externals =
    tox
[testenv:integrationtests]
# the tests environment is called by the Github action that runs the unit tests
deps =
    {[testenv:unittests]deps}
setenv = PYTHONPATH = {toxinidir}/src
commands =
    tox -e setup_bo4e
    python -m borm
    #tox -e migration
    python -m pytest --basetemp={envtmpdir} {posargs}
    tox -e remove_testpostgresql
allowlist_externals =
    tox


[testenv:linting]
# the linting environment is called by the Github Action that runs the linter
deps =
    {[testenv:unittests]deps}
    .[linting]
setenv = PYTHONPATH = {toxinidir}/src
commands =
    tox -e init_bo4e
    pylint src/borm --disable R0801 --ignore-paths 'src/borm/models'
    pylint src/borm/models --rcfile=./.pylintrc_autogen_code
    pylint tests --rcfile=tests/.pylintrc
allowlist_externals =
    tox

[testenv:type_check]
# the type_check environment checks the type hints using mypy
setenv = PYTHONPATH = {toxinidir}/src
deps =
    {[testenv:unittests]deps}
    .[type_check]
commands =
    tox -e init_bo4e
    mypy --show-error-codes tests
    mypy --show-error-codes src/borm
allowlist_externals =
    tox

[testenv:spell_check]
# the spellcheck environment checks the code for typos
setenv = PYTHONPATH = {toxinidir}/src
deps =
    -r requirements.txt
    .[spell_check]
commands =
    codespell --ignore-words=domain-specific-terms.txt src/
    codespell --ignore-words=domain-specific-terms.txt README.md

[testenv:coverage]
# the coverage environment is called by the Github Action that runs the coverage measurement
changedir = tests
deps =
    {[testenv:unittests]deps}
    .[coverage]
setenv = PYTHONPATH = {toxinidir}/src
commands =
    tox -e setup_bo4e
    python -m borm
    coverage run -m pytest --basetemp={envtmpdir} {posargs}
    coverage html --omit .tox/*,tests/*,src/borm/models/*
    coverage report --fail-under 80 --omit .tox/*,tests/*,src/borm/models/*
    tox -e remove_testpostgresql
allowlist_externals =
    tox

[testenv:setup_testpostgresql]
# Setting up a postgresql database for testing
changedir = src
deps =
    -rrequirements.txt
commands =
    python -m borm.db.postgresql_db.create_env_file
    docker compose -f "borm/db/postgresql_db/docker-compose.yaml" up -d
allowlist_externals =
    docker

[testenv:init_bo4e]
# creating SQLModel for bo4e
changedir = bo4e_schemas
deps =
    -rrequirements.txt
    .[init_bo4e]
commands =
    bost -t v202401.0.1 -o ./
    bo4e-generator -i ./ -o ../src/borm/models -ot sql_model
allowlist_externals =
    bost
    BO4E-Python-Generator

[testenv:setup_bo4e]
# Setting up a postgresql database with bo4e
deps =
    -rrequirements.txt
commands =
    tox -e setup_testpostgresql
    tox -e init_bo4e
allowlist_externals =
    tox

[testenv:remove_testpostgresql]
# removing up a postgresql database for testing
changedir = src/borm/db/postgresql_db
deps =
    -rrequirements.txt
commands =
    docker compose -f "docker-compose.yaml" down -v
allowlist_externals =
    docker

[testenv:migration]
# I created this environment for github CI because when doing docker-compose the environment doesn't know migrations and
# all its dependencies and therefore skips it during building.
# This environment just applies the revisions to the database (after docker-compose).
changedir = src/borm/db/postgresql_db
deps =
    -rrequirements.txt
commands =
    alembic upgrade head
allowlist_externals =
    alembic


[testenv:dev]
# the dev environment contains everything you need to start developing on your local machine.
deps =
    {[testenv:integrationtests]deps}
    {[testenv:unittests]deps}
    {[testenv:linting]deps}
    {[testenv:type_check]deps}
    {[testenv:coverage]deps}
    {[testenv:spell_check]deps}
    {[testenv:setup_testpostgresql]deps}
    {[testenv:remove_testpostgresql]deps}
    .[formatting]
    .[init_bo4e]
    pip-tools
    pre-commit
commands =
    python -m pip install --upgrade pip
    pip-compile pyproject.toml
    pip install -r requirements.txt
    pre-commit install


[testenv:test_packaging]
skip_install = true
deps =
    .[test_packaging]
commands =
    python -m build
    twine check dist/*
