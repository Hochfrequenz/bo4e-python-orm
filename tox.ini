[tox]
envlist =
    tests
    linting
    coverage
    type_check
skip_missing_interpreters = True
skipsdist = True

[testenv]
commands = python -m pip install --upgrade pip

[testenv:tests]
# the tests environment is called by the Github action that runs the unit tests
deps =
    -r requirements.txt
    -r dev_requirements/requirements-tests.txt
setenv = PYTHONPATH = {toxinidir}/
commands =
    tox -e setup_testpostgresql
    tox -e migration
    python -m pytest --basetemp={envtmpdir} {posargs}
    tox -e remove_testpostgresql
allowlist_externals =
    tox

[testenv:linting]
# the linting environment is called by the Github Action that runs the linter
deps =
    {[testenv:tests]deps}
    -r dev_requirements/requirements-linting.txt
    # add your fixtures like e.g. pytest_datafiles here
setenv = PYTHONPATH = {toxinidir}/src
commands =
    pylint src/models
    pylint postgresql_app/
    pylint db/
    #pylint unittests --rcfile=unittests/.pylintrc
    # add single files (ending with .py) or packages here

[testenv:type_check]
# the type_check environment checks the type hints using mypy
setenv = PYTHONPATH = {toxinidir}/src
deps =
    -r requirements.txt
    -r dev_requirements/requirements-type_check.txt
commands =
    mypy --show-error-codes src/
    mypy --show-error-codes db/
    mypy --show-error-codes postgresql_app/testing
    #mypy --show-error-codes unittests
    # add single files (ending with .py) or packages here

[testenv:spell_check]
# the spellcheck environment checks the code for typos
setenv = PYTHONPATH = {toxinidir}/src
deps =
    -r requirements.txt
    -r dev_requirements/requirements-spell_check.txt
commands =
    codespell --ignore-words=domain-specific-terms.txt src/.
    codespell --ignore-words=domain-specific-terms.txt postgresql_app/testing/.
    codespell --ignore-words=domain-specific-terms.txt db/.
    codespell --ignore-words=domain-specific-terms.txt README.md
    # add single files (ending with .py) or packages here

[testenv:coverage]
# the coverage environment is called by the Github Action that runs the coverage measurement
#changedir = postgresql_app/testing
#changedir = postgresql_app
deps =
    {[testenv:tests]deps}
    -r dev_requirements/requirements-coverage.txt
setenv = PYTHONPATH = {toxinidir} #/src
commands =
    tox -e setup_testpostgresql
    tox -e migration
    coverage run -m pytest --basetemp={envtmpdir} {posargs}
    #coverage run -m pytest
    coverage html --omit .tox/*,unittests/*
    coverage report --fail-under 80 --omit .tox/*,unittests/*
    tox -e remove_testpostgresql
allowlist_externals =
    tox

[testenv:dev]
# the dev environment contains everything you need to start developing on your local machine.
deps =
    {[testenv:tests]deps}
    {[testenv:linting]deps}
    {[testenv:type_check]deps}
    {[testenv:coverage]deps}
    {[testenv:spell_check]deps}
    -r dev_requirements/requirements-formatting.txt
    pip-tools
    pre-commit
commands =
    python -m pip install --upgrade pip
    pip-compile requirements.in
    pip install -r requirements.txt
    pre-commit install

[testenv:migration]
# I created this environment for github CI because when doing docker-compose the environment doesn't know migrations and
# all its dependencies and therefore skips it during building.
# This environment just applies the revisions to the database (after docker-compose).
changedir = postgresql_app
deps =
    -rrequirements.txt
commands =
    alembic upgrade head
allowlist_externals =
    alembic

[testenv:test_packaging]
skip_install = true
deps =
    -r dev_requirements/requirements-packaging.txt
commands =
    python -m build
    twine check dist/*

[testenv:setup_testpostgresql]
# Setting up a postgresql database for testing
changedir = postgresql_app
deps =
    -rrequirements.txt
commands =
    python create_env_file.py
    docker-compose -f "docker-compose.yaml" up -d
allowlist_externals =
    docker-compose
[testenv:remove_testpostgresql]
# removing up a postgresql database for testing
changedir = postgresql_app
deps =
    -rrequirements.txt
commands =
    docker-compose -f "docker-compose.yaml" down -v
allowlist_externals =
    docker-compose
